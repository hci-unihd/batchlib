format_version: 0.3.0

name: UNetCovidIf
description: A 2d U-Net trained to segment cell boundaries and foreground for a covid antibody IF assay.
authors:
    - Constantin Pape;@constantinpape
    - Adrian Woly;@wolny

cite:
    - text: "Pape, Constantin et al. Microscopy-based assay for semi-quantitative detection of SARS-CoV-2 specific antibodies in human sera. bioRxiv 2020."
      url: https://www.biorxiv.org/content/biorxiv/early/2020/10/07/2020.06.15.152587.full.pdf

git_repo: https://github.com/hci-unihd/batchlib/tree/master/misc/models/torch
tags: [unet2d, pytorch, immunofluorescence, segmentation, covid19]
license: MIT

documentation: ./unet_covid_if.md
covers: []
attachments: {}

inputs:
  - name: input
    data_type: float32
    data_range: [-inf, inf]
    axes: bcyx
    shape: [1, 1, 1024, 1024]
    preprocessing:
      name: zero_mean_unit_variance
      kwargs:
        mode: per_sample
        axes: xy

# TODO we have 2 channel output?! which channel is which?
outputs:
  - name: probabilities
    description: network probabilities in [0,1]  # optional description
    axes: bcyx
    data_type: float32
    data_range: [-inf, inf]
    halo: [0, 0, 32, 32]
    shape:
        reference_input: input
        scale: [1, 1, 1, 1]
        offset: [0, 0, 0, 0]

language: python
framework: pytorch

source: ./unet.py:UNet2d
kwargs: {in_channels: 1, out_channels: 2}
dependencies: conda:./environment.yaml

test_inputs:  # URI's to inputs (in order as specified in inputs) for a single test case
  - ./test-input.npy
test_outputs:  # analog to test_inputs
  - ./test-output.npy

sample_input:
  - ./sample-input.tif
sample_output:
 - ./sample-output.tif

weights:
  pytorch_state_dict:
    source: https://zenodo.org/record/3446812/files/unet2d_weights.torch
    sha256: e4d3885bccbe41cbf6c1d825f3cd2b707c7021ead5593156007e407a16b27cf2
